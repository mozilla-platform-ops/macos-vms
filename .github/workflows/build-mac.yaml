name: Build macOS VM (PR and Main)

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main ]

env:
  REGISTRY_HOST: 10.49.56.161
  REGISTRY_PORT: 5000
  REGISTRY_IMAGE: sequoia-tester
  TART_INSECURE: "--insecure"

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew tap cirruslabs/cli || true
          brew install packer cirruslabs/cli/tart ansible || true

      # Decide tags and which vault to use
      - name: Determine vault & tags
        id: determine
        run: |
          echo "Event: ${GITHUB_EVENT_NAME}"
          echo "Ref: ${GITHUB_REF_NAME}"

          if [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF_NAME}" == "main" ]]; then
            echo "Using real vault for main build"
            echo "ALIAS_TAG=prod-latest" >> $GITHUB_ENV
            echo "BUILD_TAG=prod-${GITHUB_SHA}" >> $GITHUB_ENV
            # We'll set VAULT_FILE after we stage it into the workspace (next step)
          else
            echo "Using fake vault for PR build"
            echo "VAULT_FILE=${{ github.workspace }}/mac/tester15/vault-fake.yaml" >> $GITHUB_ENV
            echo "ALIAS_TAG=pr-${{ github.event.pull_request.number }}-latest" >> $GITHUB_ENV
            echo "BUILD_TAG=pr-${{ github.event.pull_request.number }}-${GITHUB_SHA}" >> $GITHUB_ENV
          fi

          echo ""
          echo "‚úÖ Environment so far:"
          cat $GITHUB_ENV | grep -E 'VAULT_FILE|BUILD_TAG|ALIAS_TAG' || true
          echo ""

      # Stage the real vault into the workspace (only on push‚Üímain)
      - name: Stage real vault into workspace
        if: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
        run: |
          # Copy from the runner's secure location into the workspace
          install -m 600 /etc/ronin/vault-real.yaml "${GITHUB_WORKSPACE}/mac/tester15/vault-real.yaml"
          # Point VAULT_FILE at the staged workspace file (where Packer will read it)
          echo "VAULT_FILE=${GITHUB_WORKSPACE}/mac/tester15/vault-real.yaml" >> $GITHUB_ENV

      # Optional: masked hash to confirm we‚Äôre reading a file without leaking content
      - name: Log vault hash (masked)
        run: |
          if [ -f "${VAULT_FILE}" ]; then
            sha=$(shasum -a 256 "${VAULT_FILE}" | cut -d' ' -f1)
            echo "Vault file hash (for verification only): ${sha:0:8}..."
          else
            echo "‚ö†Ô∏è Vault file not found at ${VAULT_FILE}"
          fi

      # Build
      - name: Run macOS VM build
        working-directory: mac/tester15
        env:
          VM_NAME: sequoia-tester
          VAULT_FILE: ${{ env.VAULT_FILE }}
        run: |
          set -euo pipefail
          echo "üèóÔ∏è Using VAULT_FILE=$VAULT_FILE"
          echo "üîç Verifying vault exists and is readable..."
          if [[ ! -f "$VAULT_FILE" ]]; then
            echo "‚ùå Missing vault: $VAULT_FILE"
            ls -lah "$(dirname "$VAULT_FILE")" || true
            exit 1
          fi
          echo "‚úÖ Vault found; sha256=$(shasum -a 256 "$VAULT_FILE" | cut -d' ' -f1)"
          chmod +x builder.sh
          # üëá Ensure absolute path is passed to packer
          export VAULT_FILE=$(realpath "$VAULT_FILE")
          ./builder.sh

      - name: Verify registry connectivity
        run: |
          echo "üîç Testing http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/"
          curl -fsSL http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/ || \
            echo "‚ö†Ô∏è Registry reachable but returned non-200"

      - name: Push built VM to local OCI registry
        if: ${{ success() }}
        env:
          REGISTRY: ${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}
          IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          echo "üöÄ Pushing ${IMAGE}:${BUILD_TAG} to ${REGISTRY} ..."
          tart push $TART_INSECURE ${IMAGE} ${REGISTRY}/${IMAGE}:${BUILD_TAG}

      - name: Tag and push alias (branch-latest or prod-latest)
        if: ${{ success() }}
        env:
          REGISTRY: ${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}
          IMAGE: ${{ env.REGISTRY_IMAGE }}
        run: |
          echo "ü™∂ Tagging ${IMAGE}:${ALIAS_TAG} to ${REGISTRY} ..."
          tart push $TART_INSECURE ${IMAGE} ${REGISTRY}/${IMAGE}:${ALIAS_TAG}

      - name: Summary
        if: ${{ success() }}
        run: |
          echo ""
          echo "‚úÖ Build complete!"
          echo "  Registry: http://${{ env.REGISTRY_HOST }}:${{ env.REGISTRY_PORT }}/v2/"
          echo "  Image:    ${{ env.REGISTRY_IMAGE }}"
          echo "  Tag:      $BUILD_TAG"
          echo "  Alias:    $ALIAS_TAG"
          echo ""